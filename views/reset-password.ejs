<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reset Password - D'amour Muslim Matchmaking</title>

  <!-- SEO Meta Tags -->
  <meta name="description" content="Create a new password for your D'amour Muslim account.">
  <link rel="canonical" href="https://damourmuslim.com/reset-password">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
  <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
  <link rel="manifest" href="/images/site.webmanifest">
  <meta name="theme-color" content="#E91E63">

  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#E91E63',
            secondary: '#673AB7'
          },
          borderRadius: {
            'button': '8px'
          }
        }
      }
    }
  </script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Roboto:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css">

  <style>
    .material-shadow {
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .material-shadow-hover {
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    .ripple {
      position: relative;
      overflow: hidden;
    }

    .ripple::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.3);
      transform: translate(-50%, -50%);
      transition: width 0.6s, height 0.6s;
    }

    .ripple:active::before {
      width: 300px;
      height: 300px;
    }
  </style>
</head>

<body class="bg-gray-50 font-['Roboto']">
  <%- include('partials/header') %>

  <main class="pt-24 pb-16 min-h-screen flex items-center justify-center">
    <div class="w-full max-w-md px-6">
      <div class="bg-white rounded-2xl p-8 material-shadow">
        <div class="text-center mb-8">
          <div class="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="ri-key-line text-2xl text-primary"></i>
          </div>
          <h1 class="text-3xl font-bold text-gray-800 mb-3 font-['Playfair_Display']">Set New Password</h1>
          <p class="text-gray-600">Create a strong password for your account.</p>
        </div>

        <!-- Error/Success Messages -->
        <% if (typeof error !== 'undefined' && error) { %>
        <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div class="flex items-center">
            <i class="ri-error-warning-line text-red-500 mr-2"></i>
            <span class="text-red-700"><%= error %></span>
          </div>
        </div>
        <% } %>

        <form id="resetPasswordForm" class="space-y-6">
          <input type="hidden" name="token" value="<%= token %>">

          <div class="space-y-2">
            <label for="password" class="block text-sm font-medium text-gray-700">New Password</label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="ri-lock-line text-gray-400"></i>
              </div>
              <input type="password" id="password" name="password" required minlength="5" class="block w-full pl-10 pr-12 py-2.5 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white" placeholder="Enter new password (min 5 characters)">
              <button type="button" class="absolute inset-y-0 right-0 pr-3 flex items-center password-toggle" data-target="password">
                <i class="ri-eye-off-line text-gray-400 hover:text-gray-600 transition-colors duration-200"></i>
              </button>
            </div>
            <div id="password-error" class="hidden text-sm text-red-600 mt-1"></div>
            <div class="text-xs text-gray-500 mt-1">
              Password must be at least 5 characters long
            </div>
          </div>

          <div class="space-y-2">
            <label for="confirmPassword" class="block text-sm font-medium text-gray-700">Confirm New Password</label>
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="ri-lock-line text-gray-400"></i>
              </div>
              <input type="password" id="confirmPassword" name="confirmPassword" required minlength="5" class="block w-full pl-10 pr-12 py-2.5 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white" placeholder="Confirm your new password">
              <button type="button" class="absolute inset-y-0 right-0 pr-3 flex items-center password-toggle" data-target="confirmPassword">
                <i class="ri-eye-off-line text-gray-400 hover:text-gray-600 transition-colors duration-200"></i>
              </button>
            </div>
            <div id="confirm-password-error" class="hidden text-sm text-red-600 mt-1"></div>
          </div>

          <button type="submit" class="w-full flex justify-center py-2.5 px-4 border border-transparent rounded-button shadow-sm text-sm font-medium text-white bg-primary hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-all duration-300 ripple material-shadow">
            <span id="button-text">Reset Password</span>
            <i id="loading-icon" class="ri-loader-4-line animate-spin ml-2 hidden"></i>
          </button>

          <div class="text-center text-sm">
            <span class="text-gray-600">Remember your password?</span>
            <a href="/login" class="font-medium text-primary hover:text-pink-600 transition-colors duration-300 ml-1">Sign in here</a>
          </div>
        </form>
      </div>
    </div>
  </main>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('resetPasswordForm');
      const passwordInput = document.getElementById('password');
      const confirmPasswordInput = document.getElementById('confirmPassword');
      const passwordError = document.getElementById('password-error');
      const confirmPasswordError = document.getElementById('confirm-password-error');
      const buttonText = document.getElementById('button-text');
      const loadingIcon = document.getElementById('loading-icon');

      // Password validation
      passwordInput.addEventListener('blur', function() {
        const password = this.value;

        if (password && password.length < 5) {
          showPasswordError('Password must be at least 5 characters long');
          this.classList.add('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
        } else {
          hidePasswordError();
          this.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');

          // Check confirm password if it has value
          if (confirmPasswordInput.value) {
            validateConfirmPassword();
          }
        }
      });

      // Confirm password validation
      confirmPasswordInput.addEventListener('blur', validateConfirmPassword);
      confirmPasswordInput.addEventListener('input', function() {
        if (this.value === passwordInput.value && !confirmPasswordError.classList.contains('hidden')) {
          hideConfirmPasswordError();
          this.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
        }
      });

      // Clear errors when typing
      passwordInput.addEventListener('input', function() {
        if (!passwordError.classList.contains('hidden')) {
          hidePasswordError();
          this.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
        }
      });

      function validateConfirmPassword() {
        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;

        if (confirmPassword && confirmPassword !== password) {
          showConfirmPasswordError('Passwords do not match');
          confirmPasswordInput.classList.add('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
        } else {
          hideConfirmPasswordError();
          confirmPasswordInput.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
        }
      }

      // Form submission
      form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const password = passwordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        const token = document.querySelector('input[name="token"]').value;

        // Validate
        if (password.length < 5) {
          showPasswordError('Password must be at least 5 characters long');
          passwordInput.focus();
          return;
        }

        if (password !== confirmPassword) {
          showConfirmPasswordError('Passwords do not match');
          confirmPasswordInput.focus();
          return;
        }

        // Show loading state
        const submitButton = form.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        buttonText.textContent = 'Resetting...';
        loadingIcon.classList.remove('hidden');

        try {
          const response = await fetch('/reset-password', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              password,
              confirmPassword,
              token
            })
          });

          const data = await response.json();

          if (data.success) {
            // Show success message and redirect
            showSuccessMessage('Password reset successfully! Redirecting to login...');
            setTimeout(() => {
              window.location.href = '/login';
            }, 2000);
          } else {
            showGeneralError(data.error || 'Failed to reset password');
          }
        } catch (error) {
          console.error('Reset password error:', error);
          showGeneralError('Network error. Please try again.');
        } finally {
          // Reset button state
          submitButton.disabled = false;
          buttonText.textContent = 'Reset Password';
          loadingIcon.classList.add('hidden');
        }
      });

      function showPasswordError(message) {
        passwordError.textContent = message;
        passwordError.classList.remove('hidden');
      }

      function hidePasswordError() {
        passwordError.classList.add('hidden');
      }

      function showConfirmPasswordError(message) {
        confirmPasswordError.textContent = message;
        confirmPasswordError.classList.remove('hidden');
      }

      function hideConfirmPasswordError() {
        confirmPasswordError.classList.add('hidden');
      }

      function showGeneralError(message) {
        // Create error message at top of form
        const errorDiv = document.createElement('div');
        errorDiv.className = 'mb-4 p-4 bg-red-50 border border-red-200 rounded-lg';
        errorDiv.innerHTML = `
          <div class="flex items-center">
            <i class="ri-error-warning-line text-red-500 mr-2"></i>
            <span class="text-red-700">${message}</span>
          </div>
        `;

        // Remove any existing error
        const existingError = form.querySelector('.bg-red-50');
        if (existingError) {
          existingError.remove();
        }

        form.insertBefore(errorDiv, form.firstChild);
      }

      function showSuccessMessage(message) {
        // Remove any existing errors
        const existingError = form.querySelector('.bg-red-50');
        if (existingError) {
          existingError.remove();
        }

        // Create success message
        const successDiv = document.createElement('div');
        successDiv.className = 'mb-4 p-4 bg-green-50 border border-green-200 rounded-lg';
        successDiv.innerHTML = `
          <div class="flex items-center">
            <i class="ri-check-line text-green-500 mr-2"></i>
            <span class="text-green-700">${message}</span>
          </div>
        `;

        form.insertBefore(successDiv, form.firstChild);
      }
    });
    // **NEW**: Password visibility toggle functionality
    const passwordToggles = document.querySelectorAll('.password-toggle');
    passwordToggles.forEach(toggle => {
      toggle.addEventListener('click', function() {
        const targetId = this.getAttribute('data-target');
        const targetInput = document.getElementById(targetId);
        const icon = this.querySelector('i');

        if (targetInput.type === 'password') {
          targetInput.type = 'text';
          icon.className = 'ri-eye-line text-gray-400 hover:text-gray-600 transition-colors duration-200';
        } else {
          targetInput.type = 'password';
          icon.className = 'ri-eye-off-line text-gray-400 hover:text-gray-600 transition-colors duration-200';
        }
      });
    });
  </script>
</body>

</html>