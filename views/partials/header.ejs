<header class="fixed top-0 left-0 right-0 bg-white material-shadow z-50">
  <div class="flex items-center justify-between px-6 h-16">
    <div class="flex items-center">
      <h1 class="text-2xl font-bold text-primary font-['Playfair_Display']">
        <a href="/" class="hover:text-pink-600 transition-colors duration-300 cursor-pointer">
          D'amour Muslim
        </a>
      </h1>
    </div>
    <nav class="hidden md:flex items-center gap-8">
      <a href="/profiles?gender=male" class="flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-primary transition-all duration-300 font-medium">
        <i class="ri-user-line"></i>
        <span>Men</span>
      </a>
      <a href="/profiles?gender=female" class="flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-primary transition-all duration-300 font-medium">
        <i class="ri-user-3-line"></i>
        <span>Women</span>
      </a>
    </nav>
    <div class="flex items-center gap-4">
      <% if (user) { %>
      <!-- Logged in user dropdown -->
      <div>
        <button id="notificationDropdown" class="p-2 text-gray-700 hover:text-primary transition-all duration-300 relative">
          <i class="ri-notification-line text-xl"></i>
          <!-- Notification badge -->
          <span id="notificationBadge" class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center hidden">0</span>
        </button>

        <!-- Notification Dropdown -->
        <div id="notificationMenu" class="absolute inset-x-2.5 sm:right-0 sm:left-auto mt-2 sm:w-80 bg-white rounded-xl material-shadow border border-gray-100 py-4 hidden z-50 max-h-96 overflow-y-auto">

          <div class="px-4 pb-3 border-b border-gray-100 flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-800 font-['Playfair_Display']">Notifications</h3>
            <button id="markAllReadBtn" class="text-sm text-primary hover:text-pink-600 transition-colors hidden">
              Mark all read
            </button>
          </div>

          <!-- Notifications container -->
          <div id="notificationsContainer" class="max-h-80 overflow-y-auto">
            <!-- Loading state -->
            <div id="notificationsLoading" class="px-4 py-8 text-center">
              <div class="animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto mb-2"></div>
              <p class="text-gray-500 text-sm">Loading notifications...</p>
            </div>

            <!-- Empty state -->
            <div id="notificationsEmpty" class="px-4 py-8 text-center hidden">
              <div class="mb-4">
                <i class="ri-notification-off-line text-4xl text-gray-300"></i>
              </div>
              <p class="text-gray-500 font-medium">No new notifications</p>
              <p class="text-sm text-gray-400 mt-1">We'll notify you when something new arrives</p>
            </div>

            <!-- Notifications list -->
            <div id="notificationsList"></div>
          </div>
        </div>

        <!-- Notification backdrop overlay -->
        <div id="notificationBackdrop" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden transition-opacity duration-300"></div>
      </div>
      <div class="relative">
        <button id="accountDropdown" class="flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-primary transition-all duration-300">
          <i class="ri-user-line"></i>
          <span>Account</span>
          <i class="ri-arrow-down-s-line"></i>
        </button>
        <div id="dropdownMenu" class="absolute right-0 mt-2 w-48 bg-white rounded-xl material-shadow border border-gray-100 py-2 hidden">
          <% if (user.isAdmin || user.isModerator) { %>
          <a href="/admin/dashboard" class="flex items-center gap-3 px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
            <i class="ri-dashboard-line text-primary"></i>
            <span>Dashboard</span>
          </a>
          <% } else { %>

          <a href="/account" class="flex items-center gap-3 px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
            <i class="ri-user-settings-line text-primary"></i>
            <span>My Account</span>
          </a>
          <% } %>
          <hr class="my-2 border-gray-100">
          <a href="/logout" class="flex items-center gap-3 px-4 py-2 text-red-600 hover:bg-red-50 transition-colors duration-200">
            <i class="ri-logout-box-line"></i>
            <span>Logout</span>
          </a>
        </div>
      </div>
      <% } else { %>
      <!-- Not logged in - show login/signup buttons -->
      <a href="/login" class="px-6 py-2 border-2 border-primary text-primary hover:bg-primary hover:text-white transition-all duration-300 !rounded-button whitespace-nowrap ripple">
        Login
      </a>
      <a href="/register" class="px-6 py-2 bg-primary text-white hover:bg-pink-600 transition-all duration-300 !rounded-button whitespace-nowrap ripple material-shadow">
        Sign Up
      </a>
      <% } %>
    </div>
  </div>
</header>

<!-- Header dropdown JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const dropdownButton = document.getElementById('accountDropdown');
    const dropdownMenu = document.getElementById('dropdownMenu');
    const notificationButton = document.getElementById('notificationDropdown');
    const notificationMenu = document.getElementById('notificationMenu');
    const notificationBackdrop = document.getElementById('notificationBackdrop');
    const notificationBadge = document.getElementById('notificationBadge');
    const notificationsList = document.getElementById('notificationsList');
    const notificationsLoading = document.getElementById('notificationsLoading');
    const notificationsEmpty = document.getElementById('notificationsEmpty');
    const notificationsContainer = document.getElementById('notificationsContainer');
    const markAllReadBtn = document.getElementById('markAllReadBtn');

    let notifications = [];
    let unreadCount = 0;

    // Account dropdown functionality (keep existing)
    if (dropdownButton && dropdownMenu) {
      dropdownButton.addEventListener('click', function(e) {
        e.stopPropagation();
        dropdownMenu.classList.toggle('hidden');
        if (notificationMenu) {
          notificationMenu.classList.add('hidden');
          notificationBackdrop.classList.add('hidden');
        }
      });

      document.addEventListener('click', function() {
        dropdownMenu.classList.add('hidden');
      });

      dropdownMenu.addEventListener('click', function(e) {
        e.stopPropagation();
      });
    }

    // Notification system
    if (notificationButton && notificationMenu && notificationBackdrop) {
      // Load notifications on page load
      loadNotifications();

      // Check for email notification periodically
      <% if (user && !user.isAdmin) { %>
      checkEmailNotification();
      <% } %>

      // Notification dropdown toggle
      notificationButton.addEventListener('click', function(e) {
        e.stopPropagation();
        const isHidden = notificationMenu.classList.contains('hidden');

        if (isHidden) {
          notificationMenu.classList.remove('hidden');
          notificationBackdrop.classList.remove('hidden');
          if (dropdownMenu) dropdownMenu.classList.add('hidden');
          loadNotifications(); // Refresh on open
        } else {
          notificationMenu.classList.add('hidden');
          notificationBackdrop.classList.add('hidden');
        }
      });

      // Close on backdrop click
      notificationBackdrop.addEventListener('click', function() {
        notificationMenu.classList.add('hidden');
        notificationBackdrop.classList.add('hidden');
      });

      // Prevent dropdown from closing when clicking inside
      notificationMenu.addEventListener('click', function(e) {
        e.stopPropagation();
      });

      // Mark all as read
      if (markAllReadBtn) {
        markAllReadBtn.addEventListener('click', function() {
          markAllNotificationsAsRead();
        });
      }

      // Close on Escape
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          notificationMenu.classList.add('hidden');
          notificationBackdrop.classList.add('hidden');
          dropdownMenu.classList.add('hidden');
        }
      });
    }

    // Load notifications from API
    async function loadNotifications() {
      try {
        notificationsLoading.classList.remove('hidden');
        notificationsEmpty.classList.add('hidden');
        notificationsList.innerHTML = '';

        const response = await fetch('/api/notifications');
        const data = await response.json();

        if (data.success) {
          notifications = data.notifications;
          unreadCount = data.unreadCount;

          updateNotificationBadge();
          renderNotifications();
        }
      } catch (error) {
        console.error('Error loading notifications:', error);
      } finally {
        notificationsLoading.classList.add('hidden');
      }
    }

    // Update notification badge
    function updateNotificationBadge() {
      if (unreadCount > 0) {
        notificationBadge.textContent = unreadCount > 99 ? '99+' : unreadCount;
        notificationBadge.classList.remove('hidden');
        markAllReadBtn.classList.remove('hidden');
      } else {
        notificationBadge.classList.add('hidden');
        markAllReadBtn.classList.add('hidden');
      }
    }

    // Render notifications
    function renderNotifications() {
      if (notifications.length === 0) {
        notificationsEmpty.classList.remove('hidden');
        return;
      }

      notificationsEmpty.classList.add('hidden');

      notifications.forEach(notification => {
        const notificationElement = createNotificationElement(notification);
        notificationsList.appendChild(notificationElement);
      });
    }

    // Create notification element
    function createNotificationElement(notification) {
      const div = document.createElement('div');
      const isUnread = !notification.isRead;

      div.className = `px-4 py-3 border-b border-gray-50 hover:bg-gray-50 transition-colors cursor-pointer ${isUnread ? 'bg-blue-50' : ''}`;
      div.setAttribute('data-notification-id', notification._id);

      const priorityColors = {
        high: 'text-red-600',
        medium: 'text-orange-600',
        low: 'text-blue-600'
      };

      const priorityColor = priorityColors[notification.priority] || 'text-blue-600';

      div.innerHTML = `
        <div class="flex items-start gap-3">
          ${isUnread ? `<div class="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0"></div>` : `<div class="w-2 h-2 mt-2 flex-shrink-0"></div>`}
          <div class="flex-1 min-w-0">
            <div class="flex items-start justify-between gap-2">
              <h4 class="text-sm font-semibold text-gray-900 ${isUnread ? 'font-bold' : ''}">${notification.title}</h4>
              <span class="text-xs ${priorityColor} px-2 py-1 rounded-full bg-gray-100 flex-shrink-0">${notification.priority}</span>
            </div>
            <p class="text-sm text-gray-600 mt-1 line-clamp-3">${notification.message}</p>
            <div class="flex items-center justify-between mt-2">
              <span class="text-xs text-gray-400">${formatNotificationTime(notification.createdAt)}</span>
              ${notification.actionUrl ? `<button class="text-xs text-primary hover:text-pink-600 font-medium notification-action" data-url="${notification.actionUrl}">${notification.actionText || 'View'}</button>` : ''}
            </div>
          </div>
        </div>
      `;

      // Click handler for marking as read
      div.addEventListener('click', function(e) {
        if (!e.target.classList.contains('notification-action')) {
          markNotificationAsRead(notification._id);
        }
      });

      // Action button handler
      const actionBtn = div.querySelector('.notification-action');
      if (actionBtn) {
        actionBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          markNotificationAsRead(notification._id);
          window.location.href = notification.actionUrl;
        });
      }

      return div;
    }

    // Mark notification as read
    async function markNotificationAsRead(notificationId) {
      try {
        const response = await fetch(`/api/notifications/${notificationId}/read`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          // Update local state
          notifications = notifications.map(n =>
            n._id === notificationId ? {
              ...n,
              isRead: true
            } : n
          );
          unreadCount = Math.max(0, unreadCount - 1);
          updateNotificationBadge();

          // Update UI
          const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
          if (notificationElement) {
            notificationElement.classList.remove('bg-blue-50');
            const unreadDot = notificationElement.querySelector('.w-2.h-2.bg-primary');
            if (unreadDot) {
              unreadDot.classList.remove('bg-primary');
            }
          }
        }
      } catch (error) {
        console.error('Error marking notification as read:', error);
      }
    }

    // Mark all notifications as read
    async function markAllNotificationsAsRead() {
      try {
        const response = await fetch('/api/notifications/mark-all-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          notifications = notifications.map(n => ({
            ...n,
            isRead: true
          }));
          unreadCount = 0;
          updateNotificationBadge();

          // Update UI - remove all unread indicators
          document.querySelectorAll('.bg-blue-50').forEach(el => {
            el.classList.remove('bg-blue-50');
          });
          document.querySelectorAll('.bg-primary.rounded-full').forEach(el => {
            el.classList.remove('bg-primary');
          });
        }
      } catch (error) {
        console.error('Error marking all notifications as read:', error);
      }
    }

    // Check for email notification
    async function checkEmailNotification() {
      try {
        await fetch('/api/notifications/check-email', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
      } catch (error) {
        console.error('Error checking email notification:', error);
      }
    }

    // Format notification time
    function formatNotificationTime(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffInSeconds = Math.floor((now - date) / 1000);

      if (diffInSeconds < 60) return 'Just now';
      if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
      if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
      if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`;

      return date.toLocaleDateString();
    }
  });
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .notification-fade-in {
    animation: fadeIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>