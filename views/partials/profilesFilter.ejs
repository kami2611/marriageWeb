<div class="sticky top-24 bg-white rounded-2xl material-shadow p-6 h-fit">
  <div class="flex items-center justify-between mb-6">
    <h3 class="text-lg font-semibold text-gray-900 font-['Playfair_Display']">Filter Profiles</h3>
    <button id="clearFilters" class="text-primary hover:text-pink-600 text-sm font-medium transition-colors duration-300">
      Clear All
    </button>
  </div>

  <form id="filterForm" class="space-y-6">
    <!-- Gender Filter -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-3">Gender</label>
      <div class="space-y-2">
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="gender" value="" class="h-4 w-4 text-primary focus:ring-primary border-gray-300" <%= !filters?.gender ? 'checked' : '' %>>
          <span class="ml-2 text-sm text-gray-700">All</span>
        </label>
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="gender" value="male" class="h-4 w-4 text-primary focus:ring-primary border-gray-300" <%= filters?.gender === 'male' ? 'checked' : '' %>>
          <span class="ml-2 text-sm text-gray-700">Male</span>
        </label>
        <label class="flex items-center cursor-pointer">
          <input type="radio" name="gender" value="female" class="h-4 w-4 text-primary focus:ring-primary border-gray-300" <%= filters?.gender === 'female' ? 'checked' : '' %>>
          <span class="ml-2 text-sm text-gray-700">Female</span>
        </label>
      </div>
    </div>

    <!-- Age Range Filter -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-3">Age Range</label>
      <div class="grid grid-cols-2 gap-3">
        <div>
          <input type="number" name="minAge" placeholder="Min Age" min="18" max="70" value="<%= filters?.minAge || '' %>" class="block w-full px-3 py-2 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white text-sm">
        </div>
        <div>
          <input type="number" name="maxAge" placeholder="Max Age" min="18" max="70" value="<%= filters?.maxAge || '' %>" class="block w-full px-3 py-2 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white text-sm">
        </div>
      </div>
    </div>

    <!-- Height Range Filter -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-3">Height Range</label>
      <div class="grid grid-cols-2 gap-3">
        <div>
          <select name="minHeight" id="minHeightSelect" class="block w-full px-3 py-2 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 bg-white text-sm">
            <option value="">Min Height</option>
            <% 
            // Generate height options with cm values but ft display
            const heights = [
              { cm: 152, display: "5'0\"" },
              { cm: 155, display: "5'1\"" },
              { cm: 157, display: "5'2\"" },
              { cm: 160, display: "5'3\"" },
              { cm: 163, display: "5'4\"" },
              { cm: 165, display: "5'5\"" },
              { cm: 168, display: "5'6\"" },
              { cm: 170, display: "5'7\"" },
              { cm: 173, display: "5'8\"" },
              { cm: 175, display: "5'9\"" },
              { cm: 178, display: "5'10\"" },
              { cm: 180, display: "5'11\"" },
              { cm: 183, display: "6'0\"" },
              { cm: 185, display: "6'1\"" },
              { cm: 188, display: "6'2\"" },
              { cm: 191, display: "6'3\"" },
              { cm: 193, display: "6'4\"" },
              { cm: 196, display: "6'5\"" },
              { cm: 198, display: "6'6\"" },
              { cm: 201, display: "6'7\"" }
            ];
            %>
            <% heights.forEach(height => { %>
            <option value="<%= height.cm %>" <%= filters?.minHeight == height.cm ? 'selected' : '' %>>
              <%= height.display %>
            </option>
            <% }) %>
          </select>
        </div>
        <div>
          <select name="maxHeight" id="maxHeightSelect" class="block w-full px-3 py-2 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 bg-white text-sm">
            <option value="">Max Height</option>
            <% heights.forEach(height => { %>
            <option value="<%= height.cm %>" <%= filters?.maxHeight == height.cm ? 'selected' : '' %>>
              <%= height.display %>
            </option>
            <% }) %>
          </select>
        </div>
      </div>
    </div>

    <!-- Location Filter -->
    <div>
      <label for="city" class="block text-sm font-medium text-gray-700 mb-3">Location</label>
      <div class="relative">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <i class="ri-map-pin-line text-gray-400"></i>
        </div>
        <input type="text" name="city" id="city" placeholder="Enter city or location" value="<%= filters?.city || '' %>" class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white text-sm">
      </div>
    </div>

    <!-- Nationality Filter -->
    <div>
      <label for="nationality" class="block text-sm font-medium text-gray-700 mb-3">Nationality</label>
      <div class="relative">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <i class="ri-earth-line text-gray-400"></i>
        </div>
        <select name="nationality" id="nationality" class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 bg-white text-sm appearance-none">
          <option value="">All Nationalities</option>

          <option value="British" <%= filters?.nationality === 'British' ? 'selected' : '' %>>British</option>
          <option value="Pakistani" <%= filters?.nationality === 'Pakistani' ? 'selected' : '' %>>Pakistani</option>
          <option value="Bangladeshi" <%= filters?.nationality === 'Bangladeshi' ? 'selected' : '' %>>Bangladeshi</option>
          <option value="Other" <%= filters?.nationality === 'Other' ? 'selected' : '' %>>Other</option>
        </select>
        <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
          <i class="ri-arrow-down-s-line text-gray-400"></i>
        </div>
      </div>
    </div>

    <!-- Apply Filters Button -->
    <button type="submit" class="w-full py-2.5 px-4 bg-primary text-white hover:bg-pink-600 transition-all duration-300 !rounded-button ripple material-shadow">
      <i class="ri-search-line mr-2"></i>Apply Filters
    </button>

    <!-- Active Filters Display -->
    <div id="activeFilters" class="hidden">
      <div class="border-t border-gray-200 pt-4">
        <h4 class="text-sm font-medium text-gray-700 mb-2">Active Filters:</h4>
        <div id="filterTags" class="flex flex-wrap gap-2"></div>
      </div>
    </div>
  </form>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const filterForm = document.getElementById('filterForm');
    const clearFiltersBtn = document.getElementById('clearFilters');
    const minHeightSelect = document.getElementById('minHeightSelect');
    const maxHeightSelect = document.getElementById('maxHeightSelect');

    // Function to update max height options based on min height selection
    function updateMaxHeightOptions() {
      const minHeightValue = parseFloat(minHeightSelect.value);
      const maxHeightOptions = maxHeightSelect.querySelectorAll('option');

      maxHeightOptions.forEach(option => {
        if (option.value === '') return; // Skip the "Max Height" placeholder

        const optionValue = parseFloat(option.value);

        if (!isNaN(minHeightValue) && !isNaN(optionValue) && optionValue < minHeightValue) {
          // Disable options that are less than min height
          option.disabled = true;
          option.style.color = '#9CA3AF'; // Gray color
          option.style.backgroundColor = '#F3F4F6';
        } else {
          // Enable valid options
          option.disabled = false;
          option.style.color = '';
          option.style.backgroundColor = '';
        }
      });

      // If current max height is now invalid, reset it
      const currentMaxHeight = parseFloat(maxHeightSelect.value);
      if (!isNaN(minHeightValue) && !isNaN(currentMaxHeight) && currentMaxHeight < minHeightValue) {
        maxHeightSelect.value = '';
      }
    }

    // Function to update min height options based on max height selection
    function updateMinHeightOptions() {
      const maxHeightValue = parseFloat(maxHeightSelect.value);
      const minHeightOptions = minHeightSelect.querySelectorAll('option');

      minHeightOptions.forEach(option => {
        if (option.value === '') return; // Skip the "Min Height" placeholder

        const optionValue = parseFloat(option.value);

        if (!isNaN(maxHeightValue) && !isNaN(optionValue) && optionValue > maxHeightValue) {
          // Disable options that are greater than max height
          option.disabled = true;
          option.style.color = '#9CA3AF'; // Gray color
          option.style.backgroundColor = '#F3F4F6';
        } else {
          // Enable valid options
          option.disabled = false;
          option.style.color = '';
          option.style.backgroundColor = '';
        }
      });

      // If current min height is now invalid, reset it
      const currentMinHeight = parseFloat(minHeightSelect.value);
      if (!isNaN(maxHeightValue) && !isNaN(currentMinHeight) && currentMinHeight > maxHeightValue) {
        minHeightSelect.value = '';
      }
    }

    // Add event listeners for height selects
    if (minHeightSelect) {
      minHeightSelect.addEventListener('change', updateMaxHeightOptions);
    }

    if (maxHeightSelect) {
      maxHeightSelect.addEventListener('change', updateMinHeightOptions);
    }

    // Initialize height options on page load
    if (minHeightSelect && maxHeightSelect) {
      updateMaxHeightOptions();
      updateMinHeightOptions();
    }

    // Handle form submission
    if (filterForm) {
      filterForm.addEventListener('submit', function(e) {
        e.preventDefault();

        const formData = new FormData(filterForm);
        const params = new URLSearchParams();

        // Build query parameters
        for (let [key, value] of formData.entries()) {
          if (value.trim() !== '') {
            params.append(key, value);
          }
        }

        // Debug log

        // **FIX**: Always redirect to /profiles page for filtering
        const newUrl = `/profiles?${params.toString()}`;
        window.location.href = newUrl;
      });
    }

    // Clear all filters
    if (clearFiltersBtn) {
      clearFiltersBtn.addEventListener('click', function() {
        // **FIX**: Always redirect to /profiles page when clearing
        window.location.href = '/profiles';
      });
    }
  });
</script>