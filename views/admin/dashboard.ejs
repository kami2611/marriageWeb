<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
  <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
  <link rel="manifest" href="/images/site.webmanifest">
  <meta name="theme-color" content="#E91E63">
  <title>D'amour Muslim - Admin Dashboard</title>
  <link rel="stylesheet" href="/css/output.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Playfair+Display:wght@400;600;700&family=Roboto:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css">
  <style>
    :where([class^="ri-"])::before {
      content: "\f3c2";
    }

    .material-shadow {
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .material-shadow-hover {
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    .material-shadow-elevated {
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    }

    .ripple {
      position: relative;
      overflow: hidden;
    }

    .ripple::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.3);
      transform: translate(-50%, -50%);
      transition: width 0.6s, height 0.6s;
    }

    .ripple:active::before {
      width: 300px;
      height: 300px;
    }

    .gradient-bg {
      background: linear-gradient(135deg, #E91E63 0%, #673AB7 100%);
    }

    .profile-card {
      transition: all 0.3s ease;
    }

    .profile-card:hover {
      transform: translateY(-2px);
    }

    .stats-filter-card.active {
      border: 2px solid #E91E63;
      box-shadow: 0 4px 16px rgba(233, 30, 99, 0.15);
    }

    .stats-filter-card:hover {
      transform: translateY(-1px);
    }

    /* **NEW**: Modal styles */
    .modal-backdrop {
      backdrop-filter: blur(4px);
    }

    .modal-enter {
      animation: modalEnter 0.3s ease-out forwards;
    }

    .modal-exit {
      animation: modalExit 0.2s ease-in forwards;
    }

    @keyframes modalEnter {
      from {
        opacity: 0;
        transform: scale(0.95) translateY(-10px);
      }

      to {
        opacity: 1;
        transform: scale(1) translateY(0);
      }
    }

    @keyframes modalExit {
      from {
        opacity: 1;
        transform: scale(1) translateY(0);
      }

      to {
        opacity: 0;
        transform: scale(0.95) translateY(-10px);
      }
    }

    /* Input focus styling */
    #deleteConfirmationInput:focus {
      outline: none;
      ring: 2px;
      ring-color: rgb(239 68 68);
      border-color: rgb(239 68 68);
    }
  </style>
</head>

<body class="bg-gray-50 font-['Roboto']">
  <header class="fixed top-0 left-0 right-0 bg-white material-shadow z-50">
    <div class="flex items-center justify-between px-6 h-16">
      <div class="flex items-center">
        <h1 class="text-2xl font-bold text-primary font-['Playfair_Display']">
          <a href="/" class="hover:text-pink-600 transition-colors duration-300 cursor-pointer">
            D'amour Muslim
          </a>
        </h1>
        <% if (isAdmin) { %>
        <span class="ml-4 px-3 py-1 bg-primary/10 text-primary text-sm rounded-full font-medium">Admin</span>
        <% } else if (isModerator) { %>
        <span class="ml-4 px-3 py-1 bg-secondary/10 text-secondary text-sm rounded-full font-medium">Moderator</span>
        <% } %>
      </div>
      <div class="flex items-center gap-4">
        <button id="logoutBtn" class="px-6 py-2 border-2 border-red-500 text-red-500 hover:bg-red-500 hover:text-white transition-all duration-300 !rounded-button whitespace-nowrap ripple">
          <i class="ri-logout-box-line mr-2"></i>Logout
        </button>
      </div>
    </div>
  </header>

  <main class="pt-24 pb-16 min-h-screen">
    <div class="max-w-7xl mx-auto px-6">
      <!-- Admin Controls -->
      <div class="bg-white rounded-2xl p-6 material-shadow mb-8">
        <div class="flex flex-col lg:flex-row gap-4 items-center justify-between">
          <div class="flex-1 w-full lg:max-w-md">
            <div class="relative">
              <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <i class="ri-search-line text-gray-400"></i>
              </div>
              <input type="text" id="searchInput" placeholder="Search by username/ name/ phone ..." class="block w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white">
            </div>
          </div>
          <div class="flex gap-4">
            <button id="requestsBtn" class="px-6 py-2.5 bg-secondary text-white hover:bg-purple-600 transition-all duration-300 !rounded-button whitespace-nowrap ripple material-shadow">
              <i class="ri-mail-line mr-2"></i>Requests
            </button>
            <% if (isAdmin) { %>
            <button id="newsletterBtn" class="flex items-center gap-3 px-4 py-2.5 bg-purple-600 text-white hover:bg-purple-700 transition-all duration-300 !rounded-button material-shadow hover:material-shadow-hover ripple">
              <i class="ri-mail-line text-lg"></i>
              <span>Newsletter</span>
            </button>
            <% } %>
            <!-- **UPDATED**: Only show Add User for admins -->
            <% if (isAdmin) { %>
            <button id="addUserBtn" class="px-6 py-2.5 bg-primary text-white hover:bg-pink-600 transition-all duration-300 !rounded-button whitespace-nowrap ripple material-shadow">
              <i class="ri-user-add-line mr-2"></i>Add User
            </button>
            <% } %>
            <div class="hidden md:flex gap-2">
              <button id="threeCol" class="w-10 h-10 flex items-center justify-center rounded-button border-2 border-gray-300 text-gray-500 hover:border-primary hover:text-primary transition-all duration-300 relative group">
                <i class="ri-layout-row-line text-lg"></i>
                <div class="absolute bottom-12 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
                  Large Cards (3 per row)
                </div>
              </button>
              <button id="fourCol" class="w-10 h-10 flex items-center justify-center rounded-button border-2 border-primary text-primary hover:bg-primary hover:text-white transition-all duration-300 active relative group">
                <i class="ri-layout-grid-line text-lg"></i>
                <div class="absolute bottom-12 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
                  Compact Cards (4 per row)
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Stats Cards -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6 mb-8">
        <!-- Total Users -->
        <div class="bg-white rounded-xl p-6 material-shadow cursor-pointer hover:material-shadow-hover transition-all duration-300 stats-filter-card" data-filter="all">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-2xl font-bold text-gray-900"><%= stats.totalUsers %></p>
              <p class="text-sm text-gray-600 mt-1">Total Users</p>
            </div>
            <div class="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center">
              <i class="ri-group-line text-xl text-primary"></i>
            </div>
          </div>
        </div>

        <!-- By Admin -->
        <div class="bg-white rounded-xl p-6 material-shadow cursor-pointer hover:material-shadow-hover transition-all duration-300 stats-filter-card" data-filter="admin">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-2xl font-bold text-gray-900"><%= stats.registrationSources.byAdmin %></p>
              <p class="text-sm text-gray-600 mt-1">By Admin</p>
            </div>
            <div class="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
              <i class="ri-admin-line text-xl text-purple-600"></i>
            </div>
          </div>
        </div>

        <!-- Self Registered -->
        <div class="bg-white rounded-xl p-6 material-shadow cursor-pointer hover:material-shadow-hover transition-all duration-300 stats-filter-card" data-filter="register">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-2xl font-bold text-gray-900"><%= stats.registrationSources.bySelf %></p>
              <p class="text-sm text-gray-600 mt-1">Self Registered</p>
            </div>
            <div class="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
              <i class="ri-user-add-line text-xl text-orange-600"></i>
            </div>
          </div>
        </div>

        <!-- **NEW**: Featured Profiles -->
        <div class="bg-white rounded-xl p-6 material-shadow cursor-pointer hover:material-shadow-hover transition-all duration-300 stats-filter-card" data-filter="featured">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-2xl font-bold text-gray-900"><%= stats.featuredCount %></p>
              <p class="text-sm text-gray-600 mt-1">Featured Profiles</p>
            </div>
            <div class="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center">
              <i class="ri-star-fill text-xl text-yellow-600"></i>
            </div>
          </div>
        </div>
      </div>
      <!-- User Profiles Grid -->
      <div id="profileGrid" class="grid grid-cols-2 md:grid-cols-4 gap-4 md:gap-6">
        <% if (users && users.length > 0) { %>
        <% users.forEach(user => { %>
        <div class="profile-card bg-white rounded-xl md:rounded-2xl overflow-hidden material-shadow hover:material-shadow-hover" data-waliMyContactDetails="<%= user.waliMyContactDetails || '' %>" data-username="<%= user.username %>" data-name="<%= user.name || user.username %>" data-contact="<%= user.contact || '' %>" data-registration-source="<%= user.registrationSource || 'unknown' %>" data-featured="<%= user.isFeatured || false %>">
          <div class="aspect-[4/1] overflow-hidden">
            <% if (user.profilePic && user.profilePic.url) { %>
            <img src="<%= user.profilePic.url %>" class="w-full h-full object-cover" alt="<%= user.name || user.username %>'s Profile">
            <% } else { %>
            <!-- Default placeholder based on gender -->
            <% if (user.gender === 'male') { %>
            <img src="/images/boyavatar.png" class="w-16 h-16 mx-auto my-4 rounded-full object-cover" alt="<%= user.name || user.username %>'s Profile">
            <% } else { %>
            <img src="/images/girlavatar.png" class="w-16 h-16 mx-auto my-4 rounded-full object-cover" alt="<%= user.name || user.username %>'s Profile">
            <% } %>
            <% } %>
          </div>
          <div class="p-3">
            <div class="flex items-center justify-between mb-2">
              <h3 class="text-lg font-semibold text-gray-900">
                <%=  user.name || user.username %>
              </h3>
              <% 
                    // Show registration source instead of status
                    let sourceText = 'Unknown';
                    let sourceClass = 'bg-gray-100 text-gray-600';
                    
                    if (user.registrationSource === 'admin') {
                      sourceText = 'by Admin';
                      sourceClass = 'bg-purple-100 text-purple-600';
                    } else if (user.registrationSource === 'register') {
                      sourceText = 'Self';
                      sourceClass = 'bg-orange-100 text-orange-600';
                    }
                  %>
              <span class="px-2 py-1 <%= sourceClass %> text-xs rounded-full"><%= sourceText %></span>
            </div>
            <div class="flex items-center text-gray-600 mb-3">
              <i class="ri-map-pin-line mr-2"></i>
              <span>
                <% if (user.city && user.country) { %>
                <%= user.city %>, <%= user.country %>
                <% } else if (user.city) { %>
                <%= user.city %>
                <% } else if (user.country) { %>
                <%= user.country %>
                <% } else { %>
                Location not specified
                <% } %>
              </span>
            </div>
            <div class="text-sm text-gray-500 mb-4">
              <p>Username: <%= user.username %></p>
              <p>
                <% if (user.age) { %>
                Age: <%= user.age %> •
                <% } %>
                <br>
                <% if (user.email) { %>
                <%= user.email %>
                <% } %>
              </p>
              <% if (user.createdAt) { %>
              <p class="text-xs text-gray-400 mt-1">
                Joined: <%= new Date(user.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %>
              </p>
              <% } %>
            </div>
            <div class="flex gap-1 md:gap-2">
              <!-- **UPDATED**: Show different buttons based on user role -->
              <% if (isAdmin) { %>
              <!-- Admin sees all buttons - Mobile: Icons only, Desktop: Text -->
              <button class="edit-btn flex-1 px-2 md:px-3 py-2 bg-blue-500 text-white hover:bg-blue-600 transition-all duration-300 !rounded-button text-sm ripple flex items-center justify-center" data-user-id="<%= user._id %>" title="Edit User">
                <i class="ri-edit-line md:mr-1"></i>
                <span class="hidden md:inline">Edit</span>
              </button>
              <button class="delete-btn flex-1 px-2 md:px-3 py-2 bg-red-500 text-white hover:bg-red-600 transition-all duration-300 !rounded-button text-sm ripple flex items-center justify-center" data-user-id="<%= user._id %>" title="Delete User">
                <i class="ri-delete-bin-line md:mr-1"></i>
                <span class="hidden md:inline">Delete</span>
              </button>
              <button class="view-btn flex-1 px-2 md:px-3 py-2 bg-primary text-white hover:bg-pink-600 transition-all duration-300 !rounded-button text-sm ripple flex items-center justify-center" data-user-id="<%= user._id %>" data-user-slug="<%= user.profileSlug %>" title="View Profile">
                <i class="ri-eye-line md:mr-1"></i>
                <span class="hidden md:inline">View</span>
              </button>
              <div class="relative">
                <button class="feature-dropdown-btn flex items-center justify-center px-2 py-2 bg-gray-600 text-white hover:bg-gray-700 transition-all duration-300 !rounded-button text-sm" data-user-id="<%= user._id %>" title="More Options">
                  <i class="ri-arrow-up-line text-sm"></i>
                </button>

                <!-- Dropdown Menu -->
                <div class="feature-dropdown absolute bottom-full right-0 mb-1 bg-white border border-gray-200 rounded-lg shadow-lg z-10 min-w-48 hidden">
                  <button class="feature-profile-btn w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 rounded-lg transition-colors flex items-center" data-user-id="<%= user._id %>" data-featured="<%= user.isFeatured || false %>">
                    <i class="<%= user.isFeatured ? 'ri-star-line' : 'ri-star-fill' %> mr-2 text-yellow-500"></i>
                    <%= user.isFeatured ? 'Unfeature this Profile' : 'Feature this Profile' %>
                  </button>
                </div>
              </div>
              <% } else if (isModerator) { %>
              <!-- Moderator sees only view button -->
              <button class="view-btn w-full px-2 md:px-3 py-2 bg-primary text-white hover:bg-pink-600 transition-all duration-300 !rounded-button text-sm ripple flex items-center justify-center" data-user-id="<%= user._id %>" data-user-slug="<%= user.profileSlug %>" title="View Profile">
                <i class="ri-eye-line md:mr-1"></i>
                <span class="hidden md:inline">View Profile</span>
              </button>
              <% } %>
            </div>
          </div>
        </div>
        <% }) %>
        <% } else { %>
        <!-- No users found -->
        <div class="col-span-3 text-center py-16">
          <div class="max-w-md mx-auto">
            <div class="mb-4">
              <i class="ri-user-search-line text-6xl text-gray-300"></i>
            </div>
            <h3 class="text-xl font-semibold text-gray-600 mb-2">No Users Found</h3>
            <p class="text-gray-500 mb-6">There are currently no users registered in the system.</p>
            <button id="addFirstUserBtn" class="inline-flex items-center gap-2 px-6 py-2 bg-primary text-white rounded-button hover:bg-pink-600 transition-all duration-300">
              <i class="ri-user-add-line"></i>
              <span>Add First User</span>
            </button>
          </div>
        </div>
        <% } %>
      </div>

      <!-- Pagination -->
      <% if (users && users.length > 0) { %>
      <div class="flex justify-center items-center gap-4 mt-12">
        <div class="text-sm text-gray-600">
          Showing <%= users.length %> users
        </div>
      </div>
      <% } %>
    </div>
  </main>
  <div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-2xl p-8 max-w-md mx-4 material-shadow-elevated">
      <!-- Modal Header -->
      <div class="text-center mb-6">
        <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <i class="ri-error-warning-line text-3xl text-red-500"></i>
        </div>
        <h3 class="text-2xl font-bold text-gray-900 mb-2">Delete User Profile</h3>
        <p class="text-gray-600">This action cannot be undone. All user data will be permanently deleted.</p>
      </div>

      <!-- User Info Display -->
      <div class="bg-gray-50 rounded-lg p-4 mb-6">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center mr-3">
            <i class="ri-user-line text-xl text-gray-600"></i>
          </div>
          <div>
            <p class="font-semibold text-gray-900" id="deleteModalUserName">User Name</p>
            <p class="text-sm text-gray-500" id="deleteModalUserUsername">@username</p>
          </div>
        </div>
      </div>

      <!-- Confirmation Text -->
      <div class="mb-6">
        <p class="text-sm font-medium text-gray-700 mb-3">Type "delete" below to confirm deletion of this user:</p>
        <input type="text" id="deleteConfirmationInput" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 text-gray-900 placeholder-gray-400" placeholder="Type 'delete' to confirm" autocomplete="off">
        <div id="deleteInputError" class="hidden text-sm text-red-600 mt-2">
          <i class="ri-error-warning-line mr-1"></i>
          Please type "delete" exactly as shown
        </div>
      </div>

      <!-- Modal Buttons -->
      <div class="flex gap-3">
        <button id="cancelDeleteBtn" class="flex-1 px-6 py-3 border-2 border-gray-300 text-gray-700 hover:bg-gray-50 transition-all duration-300 rounded-lg font-medium">
          Cancel
        </button>
        <button id="confirmDeleteBtn" class="flex-1 px-6 py-3 bg-red-500 text-white hover:bg-red-600 transition-all duration-300 rounded-lg font-medium disabled:bg-gray-300 disabled:cursor-not-allowed" disabled>
          <span id="deleteButtonText">Delete This User</span>
          <i id="deleteLoadingIcon" class="ri-loader-4-line animate-spin ml-2 hidden"></i>
        </button>
      </div>
    </div>
  </div>
  <script id="ripple-effects">
    document.addEventListener('DOMContentLoaded', function() {
      const rippleButtons = document.querySelectorAll('.ripple');
      rippleButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          const ripple = document.createElement('span');
          const rect = this.getBoundingClientRect();
          const size = Math.max(rect.width, rect.height);
          const x = e.clientX - rect.left - size / 2;
          const y = e.clientY - rect.top - size / 2;
          ripple.style.width = ripple.style.height = size + 'px';
          ripple.style.left = x + 'px';
          ripple.style.top = y + 'px';
          ripple.classList.add('absolute', 'bg-white', 'bg-opacity-30', 'rounded-full', 'animate-ping');
          this.appendChild(ripple);
          setTimeout(() => {
            ripple.remove();
          }, 600);
        });
      });
    });
  </script>

  <script id="admin-interactions">
    document.addEventListener('DOMContentLoaded', function() {
      // **UNIFIED**: Single declaration for all elements
      const newsletterBtn = document.getElementById('newsletterBtn');
      if (newsletterBtn) {
        newsletterBtn.addEventListener('click', function() {
          window.location.href = '/admin/newsletter';
        });
      }
      const searchInput = document.getElementById('searchInput');
      const profileCards = document.querySelectorAll('.profile-card');
      const statsFilterCards = document.querySelectorAll('.stats-filter-card');
      const deleteModal = document.getElementById('deleteModal');
      const deleteModalUserName = document.getElementById('deleteModalUserName');
      const deleteModalUserUsername = document.getElementById('deleteModalUserUsername');
      const deleteConfirmationInput = document.getElementById('deleteConfirmationInput');
      const deleteInputError = document.getElementById('deleteInputError');
      const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
      const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
      const deleteButtonText = document.getElementById('deleteButtonText');
      const deleteLoadingIcon = document.getElementById('deleteLoadingIcon');

      let currentDeleteUserId = null;
      let currentDeleteUserCard = null;

      // **FIXED**: Grid toggle functionality
      const threeColBtn = document.getElementById('threeCol');
      const fourColBtn = document.getElementById('fourCol');
      const profileGrid = document.getElementById('profileGrid');

      if (threeColBtn && fourColBtn && profileGrid) {
        threeColBtn.addEventListener('click', function() {
          // Remove all possible grid classes
          profileGrid.classList.remove('grid-cols-2', 'md:grid-cols-4', 'md:grid-cols-3');
          // Add large cards (3 per row)
          profileGrid.classList.add('grid-cols-1', 'md:grid-cols-3');

          // Update button states
          threeColBtn.classList.remove('border-gray-300', 'text-gray-500');
          threeColBtn.classList.add('border-primary', 'text-primary', 'active');
          fourColBtn.classList.remove('border-primary', 'text-primary', 'active');
          fourColBtn.classList.add('border-gray-300', 'text-gray-500');
        });

        fourColBtn.addEventListener('click', function() {
          // Remove all possible grid classes
          profileGrid.classList.remove('grid-cols-1', 'md:grid-cols-3');
          // Add compact cards (4 per row) - back to default
          profileGrid.classList.add('grid-cols-2', 'md:grid-cols-4');

          // Update button states
          fourColBtn.classList.remove('border-gray-300', 'text-gray-500');
          fourColBtn.classList.add('border-primary', 'text-primary', 'active');
          threeColBtn.classList.remove('border-primary', 'text-primary', 'active');
          threeColBtn.classList.add('border-gray-300', 'text-gray-500');
        });
      }

      // Search functionality
      if (searchInput) {
        searchInput.addEventListener('input', function() {
          const searchTerm = this.value.toLowerCase();

          profileCards.forEach(card => {
            const name = card.getAttribute('data-name').toLowerCase();
            const username = card.getAttribute('data-username').toLowerCase();
            const contact = card.getAttribute('data-contact').toLowerCase();
            const waliMyContactDetailsRaw = card.getAttribute('data-waliMyContactDetails') || '';
            const waliMyContactDetails = waliMyContactDetailsRaw.replace(/\D/g, '');

            if (name.includes(searchTerm) || username.includes(searchTerm) || contact.includes(searchTerm) || waliMyContactDetails.includes(searchTerm)) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          });
        });
      }

      // Button event handlers
      const requestsBtn = document.getElementById('requestsBtn');
      if (requestsBtn) {
        requestsBtn.addEventListener('click', function() {
          window.location.href = '/admin/requests';
        });
      }

      const addUserBtn = document.getElementById('addUserBtn');
      const addFirstUserBtn = document.getElementById('addFirstUserBtn');
      [addUserBtn, addFirstUserBtn].forEach(btn => {
        if (btn) {
          btn.addEventListener('click', function() {
            window.location.href = '/admin/addUser';
          });
        }
      });

      const logoutBtn = document.getElementById('logoutBtn');
      if (logoutBtn) {
        logoutBtn.addEventListener('click', function() {
          if (confirm('Are you sure you want to logout?')) {
            window.location.href = '/logout';
          }
        });
      }

      // View buttons
      const viewButtons = document.querySelectorAll('.view-btn');
      viewButtons.forEach(button => {
        button.addEventListener('click', function() {
          const userSlug = this.getAttribute('data-user-slug');
          window.location.href = `/profiles/${userSlug}`;
        });
      });

      // Edit buttons
      const editButtons = document.querySelectorAll('.edit-btn');
      editButtons.forEach(button => {
        button.addEventListener('click', function() {
          const userId = this.getAttribute('data-user-id');
          const card = this.closest('.profile-card');
          const name = card.getAttribute('data-name');
          showNotification('Edit User', `Opening edit form for ${name}...`, 'info');
          window.location.href = `/admin/edit-user/${userId}`;
        });
      });

      // **FIXED**: Delete buttons with custom modal
      const deleteButtons = document.querySelectorAll('.delete-btn');

      deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
          const userId = this.getAttribute('data-user-id');
          const card = this.closest('.profile-card');
          const name = card.getAttribute('data-name');
          const username = card.getAttribute('data-username');

          // Store current delete context
          currentDeleteUserId = userId;
          currentDeleteUserCard = card;

          // Update modal content
          deleteModalUserName.textContent = name;
          deleteModalUserUsername.textContent = `@${username}`;

          // Reset form
          deleteConfirmationInput.value = '';
          confirmDeleteBtn.disabled = true;
          deleteInputError.classList.add('hidden');

          // Show modal
          deleteModal.classList.remove('hidden');

          // Focus input
          setTimeout(() => {
            deleteConfirmationInput.focus();
          }, 100);
        });
      });

      // Modal input validation
      if (deleteConfirmationInput) {
        deleteConfirmationInput.addEventListener('input', function() {
          const value = this.value.trim();
          const isValid = value === 'delete';

          confirmDeleteBtn.disabled = !isValid;

          if (value && !isValid) {
            deleteInputError.classList.remove('hidden');
          } else {
            deleteInputError.classList.add('hidden');
          }
        });
      }

      // Cancel delete modal
      if (cancelDeleteBtn) {
        cancelDeleteBtn.addEventListener('click', function() {
          deleteModal.classList.add('hidden');
          currentDeleteUserId = null;
          currentDeleteUserCard = null;
        });
      }

      // Confirm delete with modal
      if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', async function() {
          if (deleteConfirmationInput.value.trim() !== 'delete') {
            deleteInputError.classList.remove('hidden');
            return;
          }

          if (!currentDeleteUserId || !currentDeleteUserCard) return;

          // Show loading state
          this.disabled = true;
          deleteButtonText.textContent = 'Deleting...';
          deleteLoadingIcon.classList.remove('hidden');

          try {
            const response = await fetch(`/admin/user/${currentDeleteUserId}/delete`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              }
            });

            const data = await response.json();

            if (data.success) {
              // Hide modal first
              deleteModal.classList.add('hidden');

              // Animate card removal
              currentDeleteUserCard.style.transition = 'all 0.3s ease';
              currentDeleteUserCard.style.opacity = '0';
              currentDeleteUserCard.style.transform = 'scale(0.9)';

              setTimeout(() => {
                currentDeleteUserCard.remove();

                const name = deleteModalUserName.textContent;
                showNotification('User Deleted', `${name}'s profile has been deleted.`, 'success');

                // Check if no cards remain
                const remainingCards = document.querySelectorAll('.profile-card');
                if (remainingCards.length === 0) {
                  setTimeout(() => location.reload(), 1000);
                }
              }, 300);
            } else {
              showNotification('Delete Failed', 'Failed to delete user profile.', 'error');
            }
          } catch (error) {
            console.error('Delete error:', error);
            showNotification('Delete Failed', 'An error occurred while deleting the user.', 'error');
          } finally {
            // Reset button state
            this.disabled = false;
            deleteButtonText.textContent = 'Delete This User';
            deleteLoadingIcon.classList.add('hidden');

            // Clean up
            currentDeleteUserId = null;
            currentDeleteUserCard = null;
          }
        });
      }

      // Close modal when clicking outside
      if (deleteModal) {
        deleteModal.addEventListener('click', function(e) {
          if (e.target === this) {
            this.classList.add('hidden');
            currentDeleteUserId = null;
            currentDeleteUserCard = null;
          }
        });
      }

      // Handle escape key to close modal
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && deleteModal && !deleteModal.classList.contains('hidden')) {
          deleteModal.classList.add('hidden');
          currentDeleteUserId = null;
          currentDeleteUserCard = null;
        }
      });

      // **FIXED**: Feature dropdown functionality
      const featureDropdownBtns = document.querySelectorAll('.feature-dropdown-btn');
      const featureProfileBtns = document.querySelectorAll('.feature-profile-btn');

      featureDropdownBtns.forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const dropdown = this.nextElementSibling;

          document.querySelectorAll('.feature-dropdown').forEach(d => {
            if (d !== dropdown) d.classList.add('hidden');
          });

          dropdown.classList.toggle('hidden');
        });
      });

      document.addEventListener('click', function() {
        document.querySelectorAll('.feature-dropdown').forEach(dropdown => {
          dropdown.classList.add('hidden');
        });
      });

      featureProfileBtns.forEach(btn => {
        btn.addEventListener('click', async function(e) {
          e.stopPropagation();

          const userId = this.getAttribute('data-user-id');
          const isFeatured = this.getAttribute('data-featured') === 'true';
          const action = isFeatured ? 'unfeature' : 'feature';
          const actionText = isFeatured ? 'unfeature' : 'feature';

          const confirmed = confirm(`Are you sure you want to ${actionText} this profile?`);
          if (!confirmed) return;

          this.disabled = true;
          const originalHTML = this.innerHTML;
          this.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i>Loading...';

          try {
            const response = await fetch(`/admin/user/${userId}/feature`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                action
              })
            });

            const result = await response.json();

            if (result.success) {
              location.reload();
            } else {
              alert('Error: ' + (result.error || 'Failed to update profile'));
              this.disabled = false;
              this.innerHTML = originalHTML;
            }
          } catch (error) {
            console.error('Feature profile error:', error);
            alert('Network error occurred');
            this.disabled = false;
            this.innerHTML = originalHTML;
          }

          this.closest('.feature-dropdown').classList.add('hidden');
        });
      });

      // **FIXED**: Stats filter functionality
      statsFilterCards.forEach(card => {
        card.addEventListener('click', function() {
          const filter = this.getAttribute('data-filter');

          console.log('Filter clicked:', filter); // Debug log

          // Update active state
          statsFilterCards.forEach(c => {
            c.classList.remove('ring-2', 'ring-primary', 'active');
            c.classList.remove('border-2', 'border-primary');
          });

          this.classList.add('ring-2', 'ring-primary', 'active');

          // Filter profiles
          let visibleCount = 0;
          profileCards.forEach(profileCard => {
            const registrationSource = profileCard.getAttribute('data-registration-source');
            const isFeatured = profileCard.getAttribute('data-featured') === 'true';
            let shouldShow = false;

            if (filter === 'all') {
              shouldShow = true;
            } else if (filter === 'admin') {
              shouldShow = registrationSource === 'admin';
            } else if (filter === 'register') {
              shouldShow = registrationSource === 'register';
            } else if (filter === 'featured') {
              shouldShow = isFeatured;
            }

            if (shouldShow) {
              profileCard.style.display = 'block';
              visibleCount++;
            } else {
              profileCard.style.display = 'none';
            }
          });

          console.log('Visible count after filter:', visibleCount); // Debug log

          // Update URL without refreshing
          const url = new URL(window.location);
          if (filter === 'all') {
            url.searchParams.delete('filter');
          } else {
            url.searchParams.set('filter', filter);
          }
          window.history.replaceState({}, '', url);

          // Show filter indicator
          updateFilterIndicator(filter, visibleCount);
        });
      });

      // Filter indicator function
      function updateFilterIndicator(filter, count) {
        const existingIndicator = document.getElementById('filter-indicator');
        if (existingIndicator) {
          existingIndicator.remove();
        }

        if (filter !== 'all') {
          const indicator = document.createElement('div');
          indicator.id = 'filter-indicator';
          indicator.className = 'bg-primary text-white px-4 py-2 rounded-full text-sm mb-4 inline-flex items-center gap-2';

          let filterText = '';
          switch (filter) {
            case 'admin':
              filterText = 'Admin Added Users';
              break;
            case 'register':
              filterText = 'Self Registered Users';
              break;
            case 'featured':
              filterText = 'Featured Profiles';
              break;
          }

          indicator.innerHTML = `
            <i class="ri-filter-line"></i>
            <span>Showing ${filterText} (${count} users)</span>
            <button onclick="clearFilter()" class="ml-2 hover:bg-white hover:bg-opacity-20 rounded-full p-1 transition-all duration-200">
              <i class="ri-close-line"></i>
            </button>
          `;

          const profileGrid = document.getElementById('profileGrid');
          profileGrid.parentNode.insertBefore(indicator, profileGrid);
        }
      }

      // Global function to clear filter
      window.clearFilter = function() {
        statsFilterCards.forEach(c => c.classList.remove('ring-2', 'ring-primary', 'active'));
        if (statsFilterCards[0]) {
          statsFilterCards[0].classList.add('ring-2', 'ring-primary', 'active');
        }

        profileCards.forEach(card => {
          card.style.display = 'block';
        });

        const indicator = document.getElementById('filter-indicator');
        if (indicator) {
          indicator.remove();
        }

        // Update URL
        const url = new URL(window.location);
        url.searchParams.delete('filter');
        window.history.replaceState({}, '', url);
      };

      // Set initial active filter based on URL
      const urlParams = new URLSearchParams(window.location.search);
      const currentFilter = urlParams.get('filter') || 'all';

      if (currentFilter !== 'all') {
        const targetCard = document.querySelector(`[data-filter="${currentFilter}"]`);
        if (targetCard) {
          targetCard.click();
        }
      } else {
        // Set "Total Users" as active by default
        if (statsFilterCards[0]) {
          statsFilterCards[0].classList.add('ring-2', 'ring-primary', 'active');
        }
      }

      // Notification function
      function showNotification(title, message, type = 'info') {
        const notification = document.createElement('div');
        const bgColor = type === 'success' ? 'bg-green-500' : type === 'info' ? 'bg-blue-500' : 'bg-red-500';
        const icon = type === 'success' ? 'ri-checkbox-circle-line' : type === 'info' ? 'ri-information-line' : 'ri-error-warning-line';

        notification.className = `fixed bottom-4 right-4 ${bgColor} text-white rounded-xl p-4 material-shadow-elevated flex items-center gap-3 transform translate-y-0 opacity-100 transition-all duration-300 z-50`;
        notification.innerHTML = `
          <i class="${icon} text-xl"></i>
          <div>
            <p class="font-medium">${title}</p>
            <p class="text-sm opacity-90">${message}</p>
          </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
          notification.style.transform = 'translateY(100%)';
          notification.style.opacity = '0';
          setTimeout(() => notification.remove(), 300);
        }, 3000);
      }
    });
  </script>
</body>

</html>