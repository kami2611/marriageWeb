<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Your Profile - D'amour Muslim Matchmaking</title>

  <!-- SEO Meta Tags -->
  <meta name="description" content="Join D'amour Muslim today. Create your free profile to connect with single Muslims and start your journey towards a blessed marriage.">
  <link rel="canonical" href="https://www.damourmuslim.com/register">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16.png">
  <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
  <link rel="manifest" href="/images/site.webmanifest">
  <meta name="theme-color" content="#E91E63">
  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://www.damourmuslim.com/register">
  <meta property="og:title" content="Create Your Profile - D'amour Muslim Matchmaking">
  <meta property="og:description" content="Join D'amour Muslim today. Create your free profile to connect with single Muslims and start your journey towards a blessed marriage.">
  <meta property="og:image" content="https://www.damourmuslim.com/images/og-image-register.jpg">

  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:url" content="https://www.damourmuslim.com/register">
  <meta property="twitter:title" content="Create Your Profile - D'amour Muslim Matchmaking">
  <meta property="twitter:description" content="Join D'amour Muslim today. Create your free profile to connect with single Muslims and start your journey towards a blessed marriage.">
  <meta property="twitter:image" content="https://www.damourmuslim.com/images/og-image-register.jpg">

  <script src="https://cdn.tailwindcss.com/3.4.16"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#E91E63',
            secondary: '#673AB7'
          },
          borderRadius: {
            'none': '0px',
            'sm': '4px',
            DEFAULT: '8px',
            'md': '12px',
            'lg': '16px',
            'xl': '20px',
            '2xl': '24px',
            '3xl': '32px',
            'full': '9999px',
            'button': '8px'
          }
        }
      }
    }
  </script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Playfair+Display:wght@400;600;700&family=Roboto:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css">
  <style>
    :where([class^="ri-"])::before {
      content: "\f3c2";
    }

    .material-shadow {
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .material-shadow-hover {
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
    }

    .material-shadow-elevated {
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    }

    .ripple {
      position: relative;
      overflow: hidden;
    }

    .ripple::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.3);
      transform: translate(-50%, -50%);
      transition: width 0.6s, height 0.6s;
    }

    .ripple:active::before {
      width: 300px;
      height: 300px;
    }

    .gradient-bg {
      background: linear-gradient(135deg, #E91E63 0%, #673AB7 100%);
    }

    .rate-limited {
      background-color: #fef2f2 !important;
      border-color: #fca5a5 !important;
      cursor: not-allowed !important;
    }

    .rate-limited:hover {
      background-color: #fef2f2 !important;
    }
  </style>
</head>
<% if (isProd && !isAdmin) { %>
<!-- Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=<%= GA_ID %>"></script>
<script>
  window.dataLayer = window.dataLayer || [];

  function gtag() {
    dataLayer.push(arguments);
  }
  gtag('js', new Date());
  gtag('config', '<%= GA_ID %>');
</script>
<% } %>


<body class="bg-gray-50 font-['Roboto']">
  <header class="fixed top-0 left-0 right-0 bg-white material-shadow z-50">
    <div class="flex items-center justify-between px-6 h-16">
      <div class="flex items-center">
        <h1 class="text-2xl font-bold text-primary font-['Playfair_Display']">
          <a href="/" class="hover:text-pink-600 transition-colors duration-300 cursor-pointer">
            D'amour Muslim
          </a>
        </h1>
      </div>
      <div class="flex items-center gap-4">
        <% if (user) { %>
        <!-- Logged in user dropdown -->
        <div class="relative">
          <button id="accountDropdown" class="flex items-center gap-2 px-4 py-2 text-gray-700 hover:text-primary transition-all duration-300">
            <i class="ri-user-line"></i>
            <span>Account</span>
            <i class="ri-arrow-down-s-line"></i>
          </button>
          <div id="dropdownMenu" class="absolute right-0 mt-2 w-48 bg-white rounded-xl material-shadow border border-gray-100 py-2 hidden">
            <% if (user.isAdmin) { %>
            <a href="/admin/dashboard" class="flex items-center gap-3 px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
              <i class="ri-dashboard-line text-primary"></i>
              <span>Dashboard</span>
            </a>
            <% } else { %>
            <a href="/account" class="flex items-center gap-3 px-4 py-2 text-gray-700 hover:bg-gray-50 transition-colors duration-200">
              <i class="ri-user-settings-line text-primary"></i>
              <span>My Account</span>
            </a>
            <% } %>
            <hr class="my-2 border-gray-100">
            <a href="/logout" class="flex items-center gap-3 px-4 py-2 text-red-600 hover:bg-red-50 transition-colors duration-200">
              <i class="ri-logout-box-line"></i>
              <span>Logout</span>
            </a>
          </div>
        </div>
        <% } else { %>
        <!-- Not logged in - show login/signup buttons -->
        <a href="/login" class="px-6 py-2 border-2 border-primary text-primary hover:bg-primary hover:text-white transition-all duration-300 !rounded-button whitespace-nowrap ripple">
          Login
        </a>
        <a href="/register" class="px-6 py-2 bg-primary text-white hover:bg-pink-600 transition-all duration-300 !rounded-button whitespace-nowrap ripple material-shadow">
          Sign Up
        </a>
        <% } %>
      </div>
    </div>
  </header>
  <main class="pt-24 pb-16 min-h-screen flex items-center justify-center">
    <div class="w-full max-w-md px-6">
      <div class="bg-white rounded-2xl p-8 material-shadow">
        <div class="text-center mb-8">
          <h1 class="text-3xl font-bold text-gray-800 font-['Playfair_Display']">Join D'amour Muslim</h1>
          <p class="text-gray-600 mt-2"> Create your account to begin your search.</p>
        </div>
        <form class="space-y-6" method="POST" action="/register">
          <% if (typeof error !== 'undefined' && error) { %>
          <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <div class="flex items-center gap-2">
              <i class="ri-error-warning-line text-red-500"></i>
              <p class="text-red-600 text-sm font-medium"><%= error %></p>
            </div>
          </div>
          <% } %>
          <!-- Add this after the existing error handling in register.ejs -->
          <% if (typeof req !== 'undefined' && req.query && req.query.error === 'oauth_error') { %>
          <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <div class="flex items-center gap-2">
              <i class="ri-error-warning-line text-red-500"></i>
              <p class="text-red-600 text-sm font-medium">Google sign-in failed. Please try again or use email registration.</p>
            </div>
          </div>
          <% } %>
          <div class="space-y-4">
            <p class="text-sm font-medium text-gray-700">Do you have the passcode to get registered?</p>
            <div class="flex gap-4">
              <button type="button" id="hasPasscodeYes" class="flex-1 py-2.5 px-4 border-2 border-primary text-primary hover:bg-primary hover:text-white transition-all duration-300 !rounded-button whitespace-nowrap ripple">Yes</button>
              <button type="button" id="hasPasscodeNo" class="flex-1 py-2.5 px-4 border-2 border-gray-300 text-gray-500 hover:border-primary hover:text-primary transition-all duration-300 !rounded-button whitespace-nowrap ripple">No</button>
            </div>
          </div>

          <!-- **NEW**: Passcode Verification Section -->
          <div id="passcodeVerificationForm" class="space-y-6 hidden">
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700">Mobile Number (used to contact us) <span class="text-red-500">*</span></label>
              <div class="flex gap-2">
                <select id="countryCode" class="px-3 py-2.5 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary bg-white text-sm">
                  <% countryOptions.forEach(country => { %>
                  <option value="<%= country.code %>" <%= country.country === 'UK' ? 'selected' : '' %>>
                    <%= country.code %> (<%= country.country %>)
                  </option>
                  <% }) %>
                </select>
                <div class="relative flex-1">
                  <input type="tel" id="mobileNumber" placeholder="3065876725" class="block w-full px-3 py-2.5 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white">
                </div>
              </div>
              <p class="text-xs text-gray-500">Enter the mobile number you used to contact us on WhatsApp</p>
            </div>

            <div class="space-y-2">
              <label for="verifyPasscode" class="block text-sm font-medium text-gray-700">Passcode <span class="text-red-500">*</span></label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="ri-key-line text-gray-400"></i>
                </div>
                <input type="text" id="verifyPasscode" class="block w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white" placeholder=" passcode we shared via whatsapp">
              </div>
            </div>

            <button type="button" id="verifyDetailsBtn" class="w-full flex justify-center py-2.5 px-4 border border-transparent rounded-button shadow-sm text-sm font-medium text-white bg-secondary hover:bg-purple-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-secondary transition-all duration-300 ripple material-shadow">
              Verify Details
            </button>
          </div>

          <!-- **UPDATED**: Main Registration Form (shown after verification) -->
          <!-- **NEW**: Gender and Username Fields (shown after passcode verification) -->
          <div id="genderandusernamefields" class="space-y-6 hidden">
            <div class="text-center mb-6">
              <div class="w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="ri-user-add-line text-2xl text-white"></i>
              </div>
              <h3 class="text-xl font-bold text-gray-900 font-['Playfair_Display']">Let's generate username for you</h3>
              <p class="text-gray-600 text-sm mt-2">Choose your gender and we'll create a unique username</p>
            </div>

            <div class="space-y-6">
              <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">Gender <span class="text-red-500">*</span></label>
                <div class="flex gap-4 justify-center">
                  <label class="flex items-center cursor-pointer">
                    <input type="radio" name="gender" value="male" class="h-4 w-4 text-primary focus:ring-primary border-gray-300" required>
                    <span class="ml-2 text-sm text-gray-700 font-medium">Male</span>
                  </label>
                  <label class="flex items-center cursor-pointer">
                    <input type="radio" name="gender" value="female" class="h-4 w-4 text-primary focus:ring-primary border-gray-300" required>
                    <span class="ml-2 text-sm text-gray-700 font-medium">Female</span>
                  </label>
                </div>
              </div>

              <div class="space-y-2">
                <label for="generated-username" class="block text-sm font-medium text-gray-700">Your Username <span class="text-red-500">*</span></label>
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="ri-user-line text-gray-400"></i>
                  </div>
                  <input type="text" id="generated-username" name="username" readonly class="block w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-button bg-gray-50 text-gray-900 text-center font-medium" placeholder="Select gender to generate username">
                </div>
                <p class="text-xs text-gray-500 text-center">Username is automatically generated based on your gender</p>
              </div>

              <button type="button" id="nextBtn" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-button shadow-sm text-sm font-medium text-white bg-primary hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-all duration-300 ripple material-shadow disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                <span class="flex items-center gap-2">
                  <span>Next</span>
                  <i class="ri-arrow-right-line"></i>
                </span>
              </button>
            </div>
          </div>

          <!-- **UPDATED**: Main Registration Form (shown after gender/username selection) -->
          <div id="registrationForm" class="space-y-6 hidden">
            <div class="text-center mb-6">
              <div class="w-16 h-16 bg-gradient-to-r from-secondary to-primary rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="ri-mail-line text-2xl text-white"></i>
              </div>
              <h3 class="text-xl font-bold text-gray-900 font-['Playfair_Display']">Complete Your Registration</h3>
              <p class="text-gray-600 text-sm mt-2">Choose your registration method</p>
            </div>

            <div class="text-center">
              <a href="/auth/google" class="w-full inline-flex items-center justify-center gap-3 px-6 py-3 border-2 border-gray-300 bg-white text-gray-700 hover:bg-gray-50 hover:border-gray-400 transition-all duration-300 rounded-button text-base font-medium mb-6">
                <svg class="w-5 h-5" viewBox="0 0 24 24">
                  <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
                  <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
                  <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" />
                  <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
                </svg>
                <span>Continue with Google</span>
              </a>

              <div class="flex items-center my-6">
                <div class="flex-1 border-t border-gray-300"></div>
                <span class="px-4 text-sm text-gray-500 bg-white">or register manually</span>
                <div class="flex-1 border-t border-gray-300"></div>
              </div>
            </div>

            <!-- EMAIL AND PASSWORD FIELDS CONTINUE HERE (keep existing fields) -->
            <div class="space-y-2">
              <label for="signup-email" class="block text-sm font-medium text-gray-700">Email Address <span class="text-red-500">*</span></label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <i class="ri-mail-line text-gray-400"></i>
                </div>
                <input type="email" id="signup-email" name="email" class="block w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white" placeholder="Enter your email address">
              </div>

              <!-- Keep all existing email verification code here -->
              <button type="button" id="send-verification-btn" class="hidden mt-2 px-4 py-2 bg-secondary text-white text-sm rounded-button hover:bg-purple-600 transition-all duration-300">
                Send Email Verification Code
              </button>

              <div id="verification-section" class="hidden mt-3">
                <label for="verification-code" class="block text-sm font-medium text-gray-700 mb-2">
                  Enter 4-digit verification code
                </label>
                <div class="flex gap-2">
                  <input type="text" id="verification-code" maxlength="4" pattern="[0-9]{4}" class="flex-1 px-3 py-2 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 text-center text-lg font-mono" placeholder="0000">
                  <button type="button" id="verify-code-btn" class="px-4 py-2 bg-green-600 text-white text-sm rounded-button hover:bg-green-700 transition-all duration-300">
                    Verify
                  </button>
                </div>
                <p class="text-xs text-gray-500 mt-1">Check your email for the verification code</p>
              </div>

              <div id="email-status" class="hidden text-sm mt-2"></div>
            </div>

            <!-- Keep all existing password fields here -->
            <div class="space-y-4">
              <div class="space-y-2">
                <label for="signup-password" class="block text-sm font-medium text-gray-700">Password <span class="text-red-500">*</span></label>
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="ri-lock-line text-gray-400"></i>
                  </div>
                  <input type="password" id="signup-password" name="password" required minlength="5" class="block w-full pl-10 pr-10 py-2.5 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white" placeholder="Create a password (min 5 characters)">
                  <button type="button" class="toggle-password absolute inset-y-0 right-0 pr-3 flex items-center" data-target="signup-password">
                    <i class="ri-eye-off-line text-gray-400 hover:text-gray-600"></i>
                  </button>
                </div>
              </div>

              <div class="space-y-2">
                <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirm Password <span class="text-red-500">*</span></label>
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="ri-lock-line text-gray-400"></i>
                  </div>
                  <input type="password" id="confirm-password" name="confirmPassword" required minlength="5" class="block w-full pl-10 pr-10 py-2.5 border border-gray-300 rounded-button focus:ring-2 focus:ring-primary focus:border-primary text-gray-900 placeholder-gray-400 bg-white" placeholder="Confirm your password">
                  <button type="button" class="toggle-password absolute inset-y-0 right-0 pr-3 flex items-center" data-target="confirm-password">
                    <i class="ri-eye-off-line text-gray-400 hover:text-gray-600"></i>
                  </button>
                </div>
              </div>
            </div>

            <div class="flex items-center">
              <input type="checkbox" id="signup-remember-me" name="remember" class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded">
              <label for="signup-remember-me" class="ml-2 block text-sm text-gray-700">Remember me</label>
            </div>

            <button type="submit" class="w-full flex justify-center py-2.5 px-4 border border-transparent rounded-button shadow-sm text-sm font-medium text-white bg-primary hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-all duration-300 ripple material-shadow">
              Create Account
            </button>
          </div>

          <div class="text-center text-sm mt-6">
            <span class="text-gray-600">Already have an account?</span>
            <a href="/login" class="font-medium text-primary hover:text-pink-600 transition-colors duration-300 ml-1">Login here</a>
          </div>
        </form>
      </div>
    </div>
    <!-- WhatsApp Passcode Modal -->
    <!-- Replace the existing WhatsApp Passcode Modal with this improved version: -->

    <!-- WhatsApp Passcode Modal -->
    <div id="passcodeModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-2xl p-8 max-w-md mx-4 material-shadow-elevated">
        <div class="text-center">
          <!-- Logo/Brand Section -->
          <div class="mb-6">
            <h2 class="text-2xl font-bold text-primary font-['Playfair_Display'] mb-2">D'amour Muslim</h2>
            <p class="text-sm text-gray-500 font-medium uppercase tracking-wide">UK Leading Matrimony Platform</p>
          </div>
          <!-- Heading -->

          <!-- Content Paragraphs -->
          <div class="space-y-4 mb-8">
            <!-- Free Registration -->
            <div class="bg-green-50 border border-green-200 rounded-lg p-4">
              <div class="flex items-center justify-center gap-2 mb-2">
                <i class="ri-gift-line text-green-600"></i>
                <p class="font-semibold text-green-800">100% Free Registration</p>
              </div>
              <p class="text-sm text-green-700">No hidden fees</p>
            </div>

            <!-- Quick Process -->
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div class="flex items-center justify-center gap-2 mb-2">
                <i class="ri-time-line text-blue-600"></i>
                <p class="font-semibold text-blue-800">Get Passcode in 2 Minutes</p>
              </div>
              <p class="text-sm text-blue-700">Quick WhatsApp verification process</p>
            </div>

            <!-- Privacy -->
            <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <div class="flex items-center justify-center gap-2 mb-2">
                <i class="ri-shield-check-line text-purple-600"></i>
                <p class="font-semibold text-purple-800">No Additional Information Asked</p>
              </div>
              <p class="text-sm text-purple-700">Simple and private registration</p>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="space-y-3">
            <a href="https://wa.me/+447831899605?text=Salam%2C%20I%27m%20interested%20in%20your%20services.%20Could%20you%20please%20share%20the%20passcode%20required%20for%20registration%3F" target="_blank" rel="noopener noreferrer" class="w-full inline-flex items-center justify-center gap-3 px-6 py-4 bg-green-600 text-white hover:bg-green-700 transition-all duration-300 rounded-xl ripple material-shadow text-lg font-semibold">
              <i class="ri-whatsapp-line text-2xl"></i>
              <span>Get passcode now! </span>
            </a>

            <button id="closeModal" class="w-full px-6 py-3 border-2 border-gray-300 text-gray-700 hover:border-primary hover:text-primary transition-all duration-300 rounded-xl font-medium">
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  </main>
  <div class="text-center mt-8">
    <div class="inline-flex items-center gap-6 text-gray-500 text-sm">
      <div class="flex items-center gap-2">
        <div class="w-5 h-5 flex items-center justify-center text-primary">
          <i class="ri-shield-check-line"></i>
        </div>
        <span>Secure Login</span>
      </div>
      <div class="flex items-center gap-2">
        <div class="w-5 h-5 flex items-center justify-center text-primary">
          <i class="ri-lock-line"></i>
        </div>
        <span>Private & Protected</span>
      </div>
    </div>
  </div>
  </div>
  </main>
  <%- include('partials/footer') %>
  <script id="ripple-effects">
    document.addEventListener('DOMContentLoaded', function() {
      const rippleButtons = document.querySelectorAll('.ripple');
      rippleButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          const ripple = document.createElement('span');
          const rect = this.getBoundingClientRect();
          const size = Math.max(rect.width, rect.height);
          const x = e.clientX - rect.left - size / 2;
          const y = e.clientY - rect.top - size / 2;
          ripple.style.width = ripple.style.height = size + 'px';
          ripple.style.left = x + 'px';
          ripple.style.top = y + 'px';
          ripple.classList.add('absolute', 'bg-white', 'bg-opacity-30', 'rounded-full', 'animate-ping');
          this.appendChild(ripple);
          setTimeout(() => {
            ripple.remove();
          }, 600);
        });
      });
    });
  </script>
  <script id="form-interactions">
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.querySelector('form');
      const registrationForm = document.getElementById('registrationForm');
      const hasPasscodeYes = document.getElementById('hasPasscodeYes');
      const hasPasscodeNo = document.getElementById('hasPasscodeNo');
      const genderInputs = document.querySelectorAll('input[name="gender"]');
      const usernameField = document.getElementById('generated-username');

      // **RESTORED**: Email verification functionality
      const emailField = document.getElementById('signup-email');
      const sendVerificationBtn = document.getElementById('send-verification-btn');
      const verificationSection = document.getElementById('verification-section');
      const verificationCodeInput = document.getElementById('verification-code');
      const verifyCodeBtn = document.getElementById('verify-code-btn');
      const emailStatus = document.getElementById('email-status');
      const submitButton = form.querySelector('button[type="submit"]');

      let isEmailVerified = false;
      // Modal close functionality
      const passcodeModal = document.getElementById('passcodeModal');
      const closeModalBtn = document.getElementById('closeModal');

      if (closeModalBtn) {
        closeModalBtn.addEventListener('click', function() {
          passcodeModal.classList.add('hidden');

          // Reset the buttons when modal is closed
          resetPasscodeButtons();
        });
      }

      // Close modal when clicking outside
      if (passcodeModal) {
        passcodeModal.addEventListener('click', function(e) {
          if (e.target === this) {
            this.classList.add('hidden');
            resetPasscodeButtons();
          }
        });
      }
      // Show send verification button when valid email is entered
      emailField.addEventListener('input', function() {
        const email = this.value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

        if (emailRegex.test(email)) {
          sendVerificationBtn.classList.remove('hidden');
        } else {
          sendVerificationBtn.classList.add('hidden');
          verificationSection.classList.add('hidden');
          hideEmailStatus();
        }
      });

      // Send verification code
      sendVerificationBtn.addEventListener('click', async function() {
        const email = emailField.value.trim();
        const username = usernameField.value.trim();

        if (!email || !username) {
          showEmailStatus('Please enter email and select gender first', 'error');
          return;
        }

        // Disable button and show loading
        this.disabled = true;
        this.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i>Sending...';

        try {
          const response = await fetch('/api/send-verification-code', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              email,
              username
            })
          });

          const data = await response.json();

          if (data.success) {
            verificationSection.classList.remove('hidden');
            showEmailStatus(data.message, 'success');
            verificationCodeInput.focus();
          } else {
            // **NEW**: Handle rate limit errors specifically
            if (data.error && data.error.includes('Too many')) {
              showEmailStatus(data.error, 'error');
              // Hide the send button for 5 minutes on rate limit
              sendVerificationBtn.style.display = 'none';
              setTimeout(() => {
                location.reload();
              }, 5 * 60 * 1000);
            } else {
              showEmailStatus(data.error, 'error');
            }
          }
        } catch (error) {
          showEmailStatus('Failed to send verification code', 'error');
        } finally {
          this.disabled = false;
          this.innerHTML = 'Send Email Verification Code';
        }
      });

      // Verify code
      verifyCodeBtn.addEventListener('click', async function() {
        const code = verificationCodeInput.value.trim();

        if (code.length !== 4) {
          showEmailStatus('Please enter a 4-digit code', 'error');
          return;
        }

        this.disabled = true;
        this.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i>Verifying...';

        try {
          const response = await fetch('/api/verify-email-code', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              code
            })
          });

          const data = await response.json();

          if (data.success) {
            isEmailVerified = true;
            showEmailStatus(data.message + ' ✓', 'success');
            verificationSection.classList.add('hidden');
            sendVerificationBtn.classList.add('hidden');
            emailField.readOnly = true;
            emailField.classList.add('bg-green-50', 'border-green-300');
          } else {
            showEmailStatus(data.error, 'error');
            verificationCodeInput.value = '';
          }
        } catch (error) {
          showEmailStatus('Failed to verify code', 'error');
        } finally {
          this.disabled = false;
          this.innerHTML = 'Verify';
        }
      });

      // Helper functions
      function showEmailStatus(message, type) {
        emailStatus.textContent = message;
        emailStatus.className = `text-sm mt-2 ${type === 'error' ? 'text-red-600' : 'text-green-600'}`;
        emailStatus.classList.remove('hidden');
      }

      function hideEmailStatus() {
        emailStatus.classList.add('hidden');
      }

      // **NEW**: Email format validation on blur
      const emailErrorDiv = document.createElement('div');
      emailErrorDiv.id = 'email-error';
      emailErrorDiv.className = 'hidden text-sm text-red-600 mt-1';
      emailField.parentNode.appendChild(emailErrorDiv);

      emailField.addEventListener('blur', function() {
        const email = this.value.trim();

        // If email is empty, don't show error (it's optional)
        if (!email) {
          hideEmailError();
          return;
        }

        // Check email format
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

        if (!emailRegex.test(email)) {
          showEmailError('Invalid email format');
          this.classList.add('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
          this.classList.remove('border-gray-300', 'focus:ring-primary', 'focus:border-primary');
        } else {
          hideEmailError();
          this.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
          this.classList.add('border-gray-300', 'focus:ring-primary', 'focus:border-primary');
        }
      });

      // Clear error when user starts typing
      emailField.addEventListener('input', function() {
        if (!emailErrorDiv.classList.contains('hidden')) {
          hideEmailError();
          this.classList.remove('border-red-300', 'focus:ring-red-500', 'focus:border-red-500');
          this.classList.add('border-gray-300', 'focus:ring-primary', 'focus:border-primary');
        }
      });

      // Helper functions for email validation
      function showEmailError(message) {
        emailErrorDiv.textContent = message;
        emailErrorDiv.classList.remove('hidden');
      }

      function hideEmailError() {
        emailErrorDiv.classList.add('hidden');
      }

      function resetPasscodeButtons() {
        hasPasscodeYes.classList.remove('bg-primary', 'text-white');
        hasPasscodeYes.classList.add('text-primary');
        hasPasscodeNo.classList.remove('bg-primary', 'text-white');
        hasPasscodeNo.classList.add('text-gray-500');
      }

      hasPasscodeYes.addEventListener('click', function() {
        resetPasscodeButtons();
        this.classList.remove('text-primary');
        this.classList.add('bg-primary', 'text-white');
        const passcodeVerificationForm = document.getElementById('passcodeVerificationForm');
        passcodeVerificationForm.classList.remove('hidden');
        registrationForm.classList.add('hidden');
        whatsappLink.classList.add('hidden');
      });

      hasPasscodeNo.addEventListener('click', function() {
        resetPasscodeButtons();
        this.classList.remove('text-gray-500');
        this.classList.add('bg-primary', 'text-white');
        registrationForm.classList.add('hidden');
        passcodeVerificationForm.classList.add('hidden');

        // Show modal instead of div
        document.getElementById('passcodeModal').classList.remove('hidden');
      });

      // Generate username when gender is selected
      genderInputs.forEach(input => {
        input.addEventListener('change', async function() {
          if (this.checked) {
            try {
              const response = await fetch(`/generate-username?gender=${this.value}`);
              const data = await response.json();
              usernameField.value = data.username;
              checkNextButtonState();
            } catch (error) {
              console.error('Error generating username:', error);
              usernameField.value = '';
              checkNextButtonState();
            }
          }
        });
      });
      // ADD these NEW functions after your existing gender/username logic:

      // Enable next button when gender is selected and username is generated
      function checkNextButtonState() {
        const selectedGender = document.querySelector('input[name="gender"]:checked');
        const hasUsername = usernameField.value.trim();

        if (selectedGender && hasUsername) {
          nextBtn.disabled = false;
        } else {
          nextBtn.disabled = true;
        }
      }

      // Handle next button click - ADD THIS NEW EVENT LISTENER
      if (nextBtn) {
        nextBtn.addEventListener('click', async function() {
          const selectedGender = document.querySelector('input[name="gender"]:checked');
          const username = usernameField.value.trim();

          if (!selectedGender || !username) {
            showGenderUsernameError('Please select gender and ensure username is generated');
            return;
          }

          // Show loading state
          this.disabled = true;
          this.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i>Saving...';

          try {
            const response = await fetch('/api/savegenderandusername', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                gender: selectedGender.value,
                username: username
              })
            });

            const data = await response.json();

            if (data.success) {
              // Hide gender/username form and show registration form
              document.getElementById('genderandusernamefields').classList.add('hidden');
              document.getElementById('registrationForm').classList.remove('hidden');

              hideGenderUsernameError();
            } else {
              showGenderUsernameError(data.error);
            }
          } catch (error) {
            showGenderUsernameError('Failed to save information. Please try again.');
          } finally {
            this.disabled = false;
            this.innerHTML = '<span class="flex items-center gap-2"><span>Next</span><i class="ri-arrow-right-line"></i></span>';
          }
        });
      }

      // Helper functions - ADD THESE NEW FUNCTIONS
      function showGenderUsernameError(message) {
        const existingError = document.querySelector('.gender-username-error');
        if (existingError) {
          existingError.remove();
        }

        const errorDiv = document.createElement('div');
        errorDiv.className = 'gender-username-error mb-4 p-4 bg-red-50 border border-red-200 rounded-lg';
        errorDiv.innerHTML = `
    <div class="flex items-center gap-2">
      <i class="ri-error-warning-line text-red-500"></i>
      <p class="text-red-600 text-sm font-medium">${message}</p>
    </div>
  `;

        nextBtn.parentNode.insertBefore(errorDiv, nextBtn);
      }

      function hideGenderUsernameError() {
        const existingError = document.querySelector('.gender-username-error');
        if (existingError) {
          existingError.remove();
        }
      }
      // **NEW**: Passcode verification functionality
      const verifyDetailsBtn = document.getElementById('verifyDetailsBtn');
      const countryCode = document.getElementById('countryCode');
      const mobileNumber = document.getElementById('mobileNumber');
      const verifyPasscode = document.getElementById('verifyPasscode');
      const passcodeVerificationForm = document.getElementById('passcodeVerificationForm');
      // **NEW**: Country code to placeholder mapping
      const countryPlaceholders = <%- JSON.stringify(countryPlaceholders) %>;
      // **NEW**: Update placeholder when country code changes
      const countryCodeSelect = document.getElementById('countryCode');
      const mobileNumberInput = document.getElementById('mobileNumber');

      if (countryCodeSelect && mobileNumberInput) {
        countryCodeSelect.addEventListener('change', function() {
          const selectedCode = this.value;
          const placeholder = countryPlaceholders[selectedCode] || '1234567890';
          mobileNumberInput.placeholder = placeholder;
        });

        // Set initial placeholder
        const initialCode = countryCodeSelect.value;
        mobileNumberInput.placeholder = countryPlaceholders[initialCode] || '1234567890';
      }
      if (verifyDetailsBtn) {
        verifyDetailsBtn.addEventListener('click', async function() {
          const country = countryCode.value;
          const mobile = mobileNumber.value.trim();
          const passcode = verifyPasscode.value.trim();

          if (!mobile || !passcode) {
            showError('Please enter both mobile number and passcode');
            return;
          }

          // Show loading state
          this.disabled = true;
          this.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i>Verifying...';

          try {
            const response = await fetch('/api/verify-passcode', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                countryCode: country,
                mobileNumber: mobile,
                passcode: passcode
              })
            });

            const data = await response.json();

            if (data.success) {
              document.querySelector('.space-y-4').classList.add('hidden');
              // Hide verification form and show main registration form
              passcodeVerificationForm.classList.add('hidden');
              document.getElementById('genderandusernamefields').classList.remove('hidden');

              // Store verified mobile for later use
              sessionStorage.setItem('verifiedMobile', country + mobile);

              hideError();
            } else {
              showError(data.error);
            }
          } catch (error) {
            showError('Verification failed. Please try again.');
          } finally {
            this.disabled = false;
            this.innerHTML = 'Verify Details';
          }
        });
      }

      // Helper functions for error display
      function showError(message) {
        // Remove any existing error
        const existingError = document.querySelector('.verification-error');
        if (existingError) {
          existingError.remove();
        }

        // Create new error element
        const errorDiv = document.createElement('div');
        errorDiv.className = 'verification-error mb-4 p-4 bg-red-50 border border-red-200 rounded-lg';
        errorDiv.innerHTML = `
          <div class="flex items-center gap-2">
            <i class="ri-error-warning-line text-red-500"></i>
            <p class="text-red-600 text-sm font-medium">${message}</p>
          </div>
        `;

        // Insert before the verify button
        verifyDetailsBtn.parentNode.insertBefore(errorDiv, verifyDetailsBtn);
      }

      function hideError() {
        const existingError = document.querySelector('.verification-error');
        if (existingError) {
          existingError.remove();
        }
      }

      // **NEW**: Passcode verification logic

      if (form) {
        form.addEventListener('submit', function(e) {
          if (!isEmailVerified) {
            e.preventDefault();
            showEmailStatus('Please verify your email address first', 'error');
            return;
          }
          // Continue with existing form submission logic...
        });
      }

      // Password confirmation validation
      document.getElementById('confirm-password').addEventListener('input', function() {
        const password = document.getElementById('signup-password').value;
        const confirmPassword = this.value;

        if (confirmPassword && password !== confirmPassword) {
          this.classList.add('border-red-300');
          this.classList.remove('border-gray-300');
        } else {
          this.classList.remove('border-red-300');
          this.classList.add('border-gray-300');
        }
      });

      // Add password validation on form submit
      if (form) {
        form.addEventListener('submit', function(e) {
          const password = document.getElementById('signup-password').value;
          const confirmPassword = document.getElementById('confirm-password').value;

          // Check if passwords match
          if (password !== confirmPassword) {
            e.preventDefault();

            // Remove existing error if any
            const existingError = document.querySelector('.password-error');
            if (existingError) {
              existingError.remove();
            }

            // Create and show error message
            const errorDiv = document.createElement('div');
            errorDiv.className = 'password-error mb-4 p-4 bg-red-50 border border-red-200 rounded-lg';
            errorDiv.innerHTML = `
              <div class="flex items-center gap-2">
                <i class="ri-error-warning-line text-red-500"></i>
                <p class="text-red-600 text-sm font-medium">Passwords don't match</p>
              </div>
            `;

            // Insert error before the submit button
            const submitButton = form.querySelector('button[type="submit"]');
            submitButton.parentNode.insertBefore(errorDiv, submitButton);

            // Add red border to confirm password field
            document.getElementById('confirm-password').classList.add('border-red-500');
            document.getElementById('confirm-password').classList.remove('border-gray-300');

            return;
          }

          // Continue with existing form submission logic...
        });
      }
    });
    // Password toggle functionality
    document.querySelectorAll('.toggle-password').forEach(button => {
      button.addEventListener('click', function() {
        const targetId = this.getAttribute('data-target');
        const passwordInput = document.getElementById(targetId);
        const icon = this.querySelector('i');

        if (passwordInput.type === 'password') {
          passwordInput.type = 'text';
          icon.className = 'ri-eye-line text-gray-400 hover:text-gray-600';
        } else {
          passwordInput.type = 'password';
          icon.className = 'ri-eye-off-line text-gray-400 hover:text-gray-600';
        }
      });
    });
  </script>
</body>

</html>